apiVersion: v1
kind: Namespace
metadata:
  name: my-project

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: my-project
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
      - name: backend
        image: radoslav123/backend:latest
        ports:
        - containerPort: 5000

---

apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: my-project
spec:
  selector:
    app: backend
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: websocket
  namespace: my-project
spec:
  replicas: 1
  selector:
    matchLabels:
      app: websocket
  template:
    metadata:
      labels:
        app: websocket
    spec:
      containers:
      - name: websocket
        image: radoslav123/websocket:latest  
        ports:
        - containerPort: 8080

---
apiVersion: v1
kind: Service
metadata:
  name: websocket-service
  namespace: my-project
spec:
  selector:
    app: websocket
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: reverse-proxy
  namespace: my-project
spec:
  replicas: 1
  selector:
    matchLabels:
      app: reverse-proxy
  template:
    metadata:
      labels:
        app: reverse-proxy
    spec:
      containers:
      - name: nginx-proxy
        image: radoslav123/reverse-proxy:latest #it is a custom ngninx img
        ports:
        - containerPort: 5000
        - containerPort: 8080
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config

---
apiVersion: v1
kind: Service
metadata:
  name: reverse-proxy-service
  namespace: my-project
spec:
  selector:
    app: reverse-proxy
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000
      nodePort: 30050
    - protocol: TCP
      port: 8080
      targetPort: 8080
      nodePort: 30051
  type: NodePort

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: my-project
data:
  nginx.conf: |
    events {}

    http {
        upstream backend_service {
            server backend-service.my-project.svc.cluster.local:5000;
        }

        upstream websocket_service {
            server websocket-service.my-project.svc.cluster.local:8080;
        }

        server {
            listen 5000;

            location / {
                proxy_pass http://backend_service;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
            }
        }

        server {
            listen 8080;

            location / {
                proxy_pass http://websocket_service;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "Upgrade";
            }
        }
    }
